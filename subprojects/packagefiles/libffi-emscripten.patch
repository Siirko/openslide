diff --git a/include/ffi_common.h b/include/ffi_common.h
index a9839b3..94a1c4b 100644
--- a/include/ffi_common.h
+++ b/include/ffi_common.h
@@ -2,7 +2,7 @@
    ffi_common.h - Copyright (C) 2011, 2012, 2013  Anthony Green
                   Copyright (C) 2007  Free Software Foundation, Inc
                   Copyright (c) 1996  Red Hat, Inc.
-                  
+
    Common internal definitions and macros. Only necessary for building
    libffi.
 
@@ -32,7 +32,8 @@
 #define FFI_COMMON_H
 
 #ifdef __cplusplus
-extern "C" {
+extern "C"
+{
 #endif
 
 #include <fficonfig.h>
@@ -40,43 +41,43 @@ extern "C" {
 /* Do not move this. Some versions of AIX are very picky about where
    this is positioned. */
 #ifdef __GNUC__
-# if HAVE_ALLOCA_H
-#  include <alloca.h>
-# else
-  /* mingw64 defines this already in malloc.h. */
-#  ifndef alloca
-#    define alloca __builtin_alloca
-#  endif
-# endif
-# define MAYBE_UNUSED __attribute__((__unused__))
-# define NORETURN __attribute__((__noreturn__))
+#if HAVE_ALLOCA_H
+#include <alloca.h>
+#else
+    /* mingw64 defines this already in malloc.h. */
+#ifndef alloca
+#define alloca __builtin_alloca
+#endif
+#endif
+#define MAYBE_UNUSED __attribute__((__unused__))
+#define NORETURN __attribute__((__noreturn__))
 #else
-# define MAYBE_UNUSED
-# define NORETURN
-# if HAVE_ALLOCA_H
-#  include <alloca.h>
-# else
-#  ifdef _AIX
-#   pragma alloca
-#  else
-#   ifndef alloca /* predefined by HP cc +Olibcalls */
-#    ifdef _MSC_VER
-#     define alloca _alloca
-#    else
-char *alloca ();
-#   endif
-#  endif
-# endif
-# endif
+#define MAYBE_UNUSED
+#define NORETURN
+#if HAVE_ALLOCA_H
+#include <alloca.h>
+#else
+#ifdef _AIX
+#pragma alloca
+#else
+#ifndef alloca /* predefined by HP cc +Olibcalls */
+#ifdef _MSC_VER
+#define alloca _alloca
+#else
+char *alloca();
+#endif
+#endif
+#endif
+#endif
 #endif
 
 /* Check for the existence of memcpy. */
-#if STDC_HEADERS
-# include <string.h>
+#if HAVE_MEMCPY
+#include <string.h>
 #else
-# ifndef HAVE_MEMCPY
-#  define memcpy(d, s, n) bcopy ((s), (d), (n))
-# endif
+#ifndef HAVE_MEMCPY
+#define memcpy(d, s, n) bcopy((s), (d), (n))
+#endif
 #endif
 
 #if defined(FFI_DEBUG)
@@ -84,13 +85,13 @@ char *alloca ();
 #endif
 
 #ifdef FFI_DEBUG
-NORETURN void ffi_assert(const char *expr, const char *file, int line);
-void ffi_stop_here(void);
-void ffi_type_test(ffi_type *a, const char *file, int line);
+    NORETURN void ffi_assert(const char *expr, const char *file, int line);
+    void ffi_stop_here(void);
+    void ffi_type_test(ffi_type *a, const char *file, int line);
 
-#define FFI_ASSERT(x) ((x) ? (void)0 : ffi_assert(#x, __FILE__,__LINE__))
+#define FFI_ASSERT(x) ((x) ? (void)0 : ffi_assert(#x, __FILE__, __LINE__))
 #define FFI_ASSERT_AT(x, f, l) ((x) ? 0 : ffi_assert(#x, (f), (l)))
-#define FFI_ASSERT_VALID_TYPE(x) ffi_type_test (x, __FILE__, __LINE__)
+#define FFI_ASSERT_VALID_TYPE(x) ffi_type_test(x, __FILE__, __LINE__)
 #else
 #define FFI_ASSERT(x)
 #define FFI_ASSERT_AT(x, f, l)
@@ -98,84 +99,77 @@ void ffi_type_test(ffi_type *a, const char *file, int line);
 #endif
 
 /* v cast to size_t and aligned up to a multiple of a */
-#define FFI_ALIGN(v, a)  (((((size_t) (v))-1) | ((a)-1))+1)
+#define FFI_ALIGN(v, a) (((((size_t)(v)) - 1) | ((a) - 1)) + 1)
 /* v cast to size_t and aligned down to a multiple of a */
-#define FFI_ALIGN_DOWN(v, a) (((size_t) (v)) & -a)
-
-/* Perform machine dependent cif processing */
-ffi_status ffi_prep_cif_machdep(ffi_cif *cif);
-ffi_status ffi_prep_cif_machdep_var(ffi_cif *cif,
-	 unsigned int nfixedargs, unsigned int ntotalargs);
+#define FFI_ALIGN_DOWN(v, a) (((size_t)(v)) & -a)
 
+    /* Perform machine dependent cif processing */
+    ffi_status ffi_prep_cif_machdep(ffi_cif *cif);
+    ffi_status ffi_prep_cif_machdep_var(ffi_cif *cif, unsigned int nfixedargs, unsigned int ntotalargs);
 
 #if HAVE_LONG_DOUBLE_VARIANT
-/* Used to adjust size/alignment of ffi types.  */
-void ffi_prep_types (ffi_abi abi);
+    /* Used to adjust size/alignment of ffi types.  */
+    void ffi_prep_types(ffi_abi abi);
 #endif
 
-/* Used internally, but overridden by some architectures */
-ffi_status ffi_prep_cif_core(ffi_cif *cif,
-			     ffi_abi abi,
-			     unsigned int isvariadic,
-			     unsigned int nfixedargs,
-			     unsigned int ntotalargs,
-			     ffi_type *rtype,
-			     ffi_type **atypes);
+    /* Used internally, but overridden by some architectures */
+    ffi_status ffi_prep_cif_core(ffi_cif *cif, ffi_abi abi, unsigned int isvariadic, unsigned int nfixedargs,
+                                 unsigned int ntotalargs, ffi_type *rtype, ffi_type **atypes);
 
-/* Translate a data pointer to a code pointer.  Needed for closures on
-   some targets.  */
-void *ffi_data_to_code_pointer (void *data) FFI_HIDDEN;
+    /* Translate a data pointer to a code pointer.  Needed for closures on
+       some targets.  */
+    void *ffi_data_to_code_pointer(void *data) FFI_HIDDEN;
 
-/* The arch code calls this to determine if a given closure has a
-   static trampoline. */
-int ffi_tramp_is_present (void *closure) FFI_HIDDEN;
+    /* The arch code calls this to determine if a given closure has a
+       static trampoline. */
+    int ffi_tramp_is_present(void *closure) FFI_HIDDEN;
 
-/* Return a file descriptor of a temporary zero-sized file in a
-   writable and executable filesystem. */
-int open_temp_exec_file(void) FFI_HIDDEN;
+    /* Return a file descriptor of a temporary zero-sized file in a
+       writable and executable filesystem. */
+    int open_temp_exec_file(void) FFI_HIDDEN;
 
-/* Extended cif, used in callback from assembly routine */
-typedef struct
-{
-  ffi_cif *cif;
-  void *rvalue;
-  void **avalue;
-} extended_cif;
+    /* Extended cif, used in callback from assembly routine */
+    typedef struct
+    {
+        ffi_cif *cif;
+        void *rvalue;
+        void **avalue;
+    } extended_cif;
 
 /* Terse sized type definitions.  */
 #if defined(_MSC_VER) || defined(__sgi) || defined(__SUNPRO_C)
-typedef unsigned char UINT8;
-typedef signed char   SINT8;
-typedef unsigned short UINT16;
-typedef signed short   SINT16;
-typedef unsigned int UINT32;
-typedef signed int   SINT32;
-# ifdef _MSC_VER
-typedef unsigned __int64 UINT64;
-typedef signed __int64   SINT64;
-# else
-# include <inttypes.h>
-typedef uint64_t UINT64;
-typedef int64_t  SINT64;
-# endif
+    typedef unsigned char UINT8;
+    typedef signed char SINT8;
+    typedef unsigned short UINT16;
+    typedef signed short SINT16;
+    typedef unsigned int UINT32;
+    typedef signed int SINT32;
+#ifdef _MSC_VER
+    typedef unsigned __int64 UINT64;
+    typedef signed __int64 SINT64;
+#else
+#include <inttypes.h>
+    typedef uint64_t UINT64;
+    typedef int64_t SINT64;
+#endif
 #else
-typedef unsigned int UINT8  __attribute__((__mode__(__QI__)));
-typedef signed int   SINT8  __attribute__((__mode__(__QI__)));
+typedef unsigned int UINT8 __attribute__((__mode__(__QI__)));
+typedef signed int SINT8 __attribute__((__mode__(__QI__)));
 typedef unsigned int UINT16 __attribute__((__mode__(__HI__)));
-typedef signed int   SINT16 __attribute__((__mode__(__HI__)));
+typedef signed int SINT16 __attribute__((__mode__(__HI__)));
 typedef unsigned int UINT32 __attribute__((__mode__(__SI__)));
-typedef signed int   SINT32 __attribute__((__mode__(__SI__)));
+typedef signed int SINT32 __attribute__((__mode__(__SI__)));
 typedef unsigned int UINT64 __attribute__((__mode__(__DI__)));
-typedef signed int   SINT64 __attribute__((__mode__(__DI__)));
+typedef signed int SINT64 __attribute__((__mode__(__DI__)));
 #endif
 
-typedef float FLOAT32;
+    typedef float FLOAT32;
 
 #ifndef __GNUC__
 #define __builtin_expect(x, expected_value) (x)
 #endif
-#define LIKELY(x)    __builtin_expect(!!(x),1)
-#define UNLIKELY(x)  __builtin_expect((x)!=0,0)
+#define LIKELY(x) __builtin_expect(!!(x), 1)
+#define UNLIKELY(x) __builtin_expect((x) != 0, 0)
 
 #ifdef __cplusplus
 }
diff --git a/src/wasm32/ffitarget.h b/src/wasm32/ffitarget.h
index ac78b74..ad9e25b 100644
--- a/src/wasm32/ffitarget.h
+++ b/src/wasm32/ffitarget.h
@@ -40,15 +40,16 @@ typedef signed long ffi_sarg;
 // TODO: https://github.com/emscripten-core/emscripten/issues/9868
 typedef void (*ffi_fp)(void);
 
-typedef enum ffi_abi {
-  FFI_FIRST_ABI = 0,
-  FFI_WASM32, // "raw", no structures, varargs, or closures (not implemented!)
-  FFI_WASM32_EMSCRIPTEN, // structures, varargs, and split 64-bit params
-  FFI_LAST_ABI,
+typedef enum ffi_abi
+{
+    FFI_FIRST_ABI = 0,
+    FFI_WASM32,            // "raw", no structures, varargs, or closures (not implemented!)
+    FFI_WASM32_EMSCRIPTEN, // structures, varargs, and split 64-bit params
+    FFI_LAST_ABI,
 #ifdef __EMSCRIPTEN__
-  FFI_DEFAULT_ABI = FFI_WASM32_EMSCRIPTEN
+    FFI_DEFAULT_ABI = FFI_WASM32_EMSCRIPTEN
 #else
-  FFI_DEFAULT_ABI = FFI_WASM32
+    FFI_DEFAULT_ABI = FFI_WASM32
 #endif
 } ffi_abi;
 
@@ -57,6 +58,6 @@ typedef enum ffi_abi {
 #define FFI_TRAMPOLINE_SIZE 4
 // #define FFI_NATIVE_RAW_API 0
 #define FFI_TARGET_SPECIFIC_VARIADIC 1
-#define FFI_EXTRA_CIF_FIELDS  unsigned int nfixedargs
+#define FFI_EXTRA_CIF_FIELDS unsigned int nfixedargs
 
 #endif
diff --git a/testsuite/emscripten/build.sh b/testsuite/emscripten/build.sh
index c77c041..cf9da5a 100755
--- a/testsuite/emscripten/build.sh
+++ b/testsuite/emscripten/build.sh
@@ -54,7 +54,7 @@ export EM_PKG_CONFIG_PATH="$PKG_CONFIG_PATH"
 
 # Specific variables for cross-compilation
 export CHOST="wasm32-unknown-linux" # wasm32-unknown-emscripten
-
+export WARNINGS=""
 autoreconf -fiv
 emconfigure ./configure --host=$CHOST --prefix="$TARGET" --enable-static --disable-shared --disable-dependency-tracking \
   --disable-builddir --disable-multi-os-directory --disable-raw-api --disable-docs
